// keyspace xd

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: xconf_device.proto

package conversion

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type XconfDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId               string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Partner                 string `protobuf:"bytes,2,opt,name=partner,proto3" json:"partner,omitempty"`
	Model                   string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	ApplicationType         string `protobuf:"bytes,4,opt,name=application_type,json=applicationType,proto3" json:"application_type,omitempty"`
	Env                     string `protobuf:"bytes,5,opt,name=env,proto3" json:"env,omitempty"`
	FwVersion               string `protobuf:"bytes,6,opt,name=fw_version,json=fwVersion,proto3" json:"fw_version,omitempty"`
	EstbIp                  []byte `protobuf:"bytes,7,opt,name=estb_ip,json=estbIp,proto3" json:"estb_ip,omitempty"`
	Experience              string `protobuf:"bytes,8,opt,name=experience,proto3" json:"experience,omitempty"`
	RfcHash                 []byte `protobuf:"bytes,9,opt,name=rfc_hash,json=rfcHash,proto3" json:"rfc_hash,omitempty"`
	TelemetryHash           []byte `protobuf:"bytes,10,opt,name=telemetry_hash,json=telemetryHash,proto3" json:"telemetry_hash,omitempty"`
	DcmHash                 []byte `protobuf:"bytes,11,opt,name=dcm_hash,json=dcmHash,proto3" json:"dcm_hash,omitempty"`
	IsAtWarehouse           bool   `protobuf:"varint,12,opt,name=is_at_warehouse,json=isAtWarehouse,proto3" json:"is_at_warehouse,omitempty"`
	RfcPrimaryHash          []byte `protobuf:"bytes,13,opt,name=rfc_primary_hash,json=rfcPrimaryHash,proto3" json:"rfc_primary_hash,omitempty"`
	RfcPostProcessingHash   []byte `protobuf:"bytes,14,opt,name=rfc_post_processing_hash,json=rfcPostProcessingHash,proto3" json:"rfc_post_processing_hash,omitempty"`
	T2Hash                  []byte `protobuf:"bytes,15,opt,name=t2_hash,json=t2Hash,proto3" json:"t2_hash,omitempty"`
	CtxHash                 []byte `protobuf:"bytes,16,opt,name=ctx_hash,json=ctxHash,proto3" json:"ctx_hash,omitempty"`
	OfferedFwVersion        string `protobuf:"bytes,17,opt,name=offered_fw_version,json=offeredFwVersion,proto3" json:"offered_fw_version,omitempty"`
	OfferedFwRfcHash        []byte `protobuf:"bytes,18,opt,name=offered_fw_rfc_hash,json=offeredFwRfcHash,proto3" json:"offered_fw_rfc_hash,omitempty"`
	OfferedFwRfcPrimaryHash []byte `protobuf:"bytes,19,opt,name=offered_fw_rfc_primary_hash,json=offeredFwRfcPrimaryHash,proto3" json:"offered_fw_rfc_primary_hash,omitempty"`
}

func (x *XconfDevice) Reset() {
	*x = XconfDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xconf_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XconfDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XconfDevice) ProtoMessage() {}

func (x *XconfDevice) ProtoReflect() protoreflect.Message {
	mi := &file_xconf_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XconfDevice.ProtoReflect.Descriptor instead.
func (*XconfDevice) Descriptor() ([]byte, []int) {
	return file_xconf_device_proto_rawDescGZIP(), []int{0}
}

func (x *XconfDevice) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *XconfDevice) GetPartner() string {
	if x != nil {
		return x.Partner
	}
	return ""
}

func (x *XconfDevice) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *XconfDevice) GetApplicationType() string {
	if x != nil {
		return x.ApplicationType
	}
	return ""
}

func (x *XconfDevice) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *XconfDevice) GetFwVersion() string {
	if x != nil {
		return x.FwVersion
	}
	return ""
}

func (x *XconfDevice) GetEstbIp() []byte {
	if x != nil {
		return x.EstbIp
	}
	return nil
}

func (x *XconfDevice) GetExperience() string {
	if x != nil {
		return x.Experience
	}
	return ""
}

func (x *XconfDevice) GetRfcHash() []byte {
	if x != nil {
		return x.RfcHash
	}
	return nil
}

func (x *XconfDevice) GetTelemetryHash() []byte {
	if x != nil {
		return x.TelemetryHash
	}
	return nil
}

func (x *XconfDevice) GetDcmHash() []byte {
	if x != nil {
		return x.DcmHash
	}
	return nil
}

func (x *XconfDevice) GetIsAtWarehouse() bool {
	if x != nil {
		return x.IsAtWarehouse
	}
	return false
}

func (x *XconfDevice) GetRfcPrimaryHash() []byte {
	if x != nil {
		return x.RfcPrimaryHash
	}
	return nil
}

func (x *XconfDevice) GetRfcPostProcessingHash() []byte {
	if x != nil {
		return x.RfcPostProcessingHash
	}
	return nil
}

func (x *XconfDevice) GetT2Hash() []byte {
	if x != nil {
		return x.T2Hash
	}
	return nil
}

func (x *XconfDevice) GetCtxHash() []byte {
	if x != nil {
		return x.CtxHash
	}
	return nil
}

func (x *XconfDevice) GetOfferedFwVersion() string {
	if x != nil {
		return x.OfferedFwVersion
	}
	return ""
}

func (x *XconfDevice) GetOfferedFwRfcHash() []byte {
	if x != nil {
		return x.OfferedFwRfcHash
	}
	return nil
}

func (x *XconfDevice) GetOfferedFwRfcPrimaryHash() []byte {
	if x != nil {
		return x.OfferedFwRfcPrimaryHash
	}
	return nil
}

var File_xconf_device_proto protoreflect.FileDescriptor

var file_xconf_device_proto_rawDesc = []byte{
	0x0a, 0x12, 0x78, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x78, 0x64, 0x61, 0x73, 0x22, 0xa8, 0x05, 0x0a, 0x0b, 0x58,
	0x63, 0x6f, 0x6e, 0x66, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x77, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x73, 0x74, 0x62, 0x5f, 0x69, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x73, 0x74, 0x62, 0x49, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x66, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x72, 0x66, 0x63, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x63, 0x6d, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x64, 0x63, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x73, 0x5f, 0x61, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x41, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x66, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72,
	0x66, 0x63, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x37, 0x0a,
	0x18, 0x72, 0x66, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x15, 0x72, 0x66, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x32, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x32, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x63, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x46,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x66, 0x77, 0x5f, 0x72, 0x66, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x46, 0x77,
	0x52, 0x66, 0x63, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x1b, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x66, 0x77, 0x5f, 0x72, 0x66, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x64, 0x46, 0x77, 0x52, 0x66, 0x63, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x3b, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xconf_device_proto_rawDescOnce sync.Once
	file_xconf_device_proto_rawDescData = file_xconf_device_proto_rawDesc
)

func file_xconf_device_proto_rawDescGZIP() []byte {
	file_xconf_device_proto_rawDescOnce.Do(func() {
		file_xconf_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_xconf_device_proto_rawDescData)
	})
	return file_xconf_device_proto_rawDescData
}

var file_xconf_device_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_xconf_device_proto_goTypes = []interface{}{
	(*XconfDevice)(nil), // 0: xdas.XconfDevice
}
var file_xconf_device_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_xconf_device_proto_init() }
func file_xconf_device_proto_init() {
	if File_xconf_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_xconf_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XconfDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xconf_device_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xconf_device_proto_goTypes,
		DependencyIndexes: file_xconf_device_proto_depIdxs,
		MessageInfos:      file_xconf_device_proto_msgTypes,
	}.Build()
	File_xconf_device_proto = out.File
	file_xconf_device_proto_rawDesc = nil
	file_xconf_device_proto_goTypes = nil
	file_xconf_device_proto_depIdxs = nil
}
